package ${package_service}.impl;

import ${package_pojo}.${Table};
import ${package_query}.${Table}Query;
import ${package_manager}.${Table}Manager;
import ${package_service}.${Table}Service;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
CollectionUtil;
import java.util.List;



/**
 * (${Table})表服务实现类
 *
 * @author ${author}
 * @date ${cdate} 
 * @since 1.0
 */
@Service("${table}Service}")
@Slf4j
public class ${Table}ServiceImpl  implements ${Table}Service {

    /**
     * 管理层
     */
    @Autowired
    private ${Table}Manager ${table}Manager;



    /**
     * 插入一条纪录
     *
     * @param
     * @return long
     * @author ${author} 
     * @date ${cdate} 
     */
    @Override
    public long insert(${Table} ${table}) {
        return ${table}Manager.insert(${table});
    }

    /**
     * 更新一条纪录
     *
     * @param ${table}
     * @return int
     * @author ${author} 
     * @date ${cdate} 
     */
    @Override
    public int update(${Table} ${table}) {
        return ${table}Manager.update(${table});
    }

    /**
     * 根据主键删除一条记录
     *
     * @param id
     * @return int
     * @author ${author} 
     * @date ${cdate} 
     */
    @Override
    public int deleteById(Long id) {
        return ${table}Manager.deleteById(id);
    }

    /**
     * 根据查询条件 查询list
     *
     * @param query
     * @return java.util.List<${package_pojo}.${Table}>
     * @author ${author} 
     * @date ${cdate} 
     */
    @Override
    public List<${Table}> queryForList(${Table}Query query) {
        return ${table}Manager.queryForList(query);
    }

    /**
     * 根据查询条件 查询 list （分页）
     *
     * @param query
     * @return java.util.List<${package_pojo}.${Table}>
     * @author ${author} 
     * @date ${cdate} 
     */
    @Override
    public List<${Table}> queryForPage(${Table}Query query) {
        return ${table}Manager.queryForPage(query);
    }

    /**
     * 根据查询条件 查询实体数量
     *
     * @param query
     * @return int
     * @author ${author} 
     * @date ${cdate} 
     */
    @Override
    public int queryForCount(${Table}Query query) {
        return ${table}Manager.queryForCount(query);
    }

    /**
     * 根据查询条件 查询实体
     *
     * @param id
     * @return ${package_pojo}.${Table}
     * @author ${author} 
     * @date ${cdate} 
     */
    @Override
    public ${Table} getEntityById(Long id) {
        return ${table}Manager.getEntityById(id);
    }

    /**
     * 根据条件删除
     *
     * @param query
     * @author ${author} 
     * @date ${cdate} 
     */
    @Override
    public void deleteByQuery(${Table}Query query) {
        List<${Table}> list = ${table}Manager.queryForList(query);
        if (CollectionUtil.isNotEmpty(list)) {
            list.forEach(t -> ${table}Manager.deleteById(t.getId()));
        }
    }

}